plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'

    // KSP
    id 'com.google.devtools.ksp'

    // Parcelize Models
    id 'kotlin-parcelize'

    // Room, Hilt
    id 'kotlin-kapt'

    // Hilt
    id 'com.google.dagger.hilt.android'

    // Firebase
    // Add the Google services Gradle plugin
    id 'com.google.gms.google-services'
    // Add the Crashlytics Gradle plugin
    id 'com.google.firebase.crashlytics'
    // Add the Performance Monitoring Gradle plugin
    id 'com.google.firebase.firebase-perf'

}

android {
    namespace 'io.dev.relic'
    compileSdk 33

    defaultConfig {
        applicationId "io.dev.relic"
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        vectorDrawables {
            useSupportLibrary true
        }

        // Specify the schemas saved location of Room database.
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/room_database_schemas".toString()]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion = rootProject.ext.compose_compiler_version
    }

    kapt {
        correctErrorTypes true
    }
}

dependencies {

    /* ======================== Google Official Extension ======================== */

    implementation "androidx.core:core-ktx:${rootProject.ext.kotlin_core_version}"
    implementation "androidx.appcompat:appcompat:${rootProject.ext.appcompat_version}"
    implementation "androidx.constraintlayout:constraintlayout:${rootProject.ext.constraintlayout_version}"
    testImplementation "junit:junit:${rootProject.ext.junit_version}"
    androidTestImplementation "androidx.test.ext:junit:${rootProject.ext.junit_ext_version}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${rootProject.ext.espresso_ui_test_version}"

    // Compose Ui
    def composeBom = platform("androidx.compose:compose-bom:${rootProject.ext.compose_bom_version}")
    implementation composeBom
    androidTestImplementation composeBom
    // Material Design
    implementation 'androidx.compose.material:material'
    // Android Studio Preview support
    implementation 'androidx.compose.ui:ui-tooling-preview'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    // UI Tests
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'
    // Optional - Included automatically by material, only add when you need
    // the icons but not the material library (e.g. when using Material3 or a
    // custom design system based on Foundation)
    implementation 'androidx.compose.material:material-icons-core'
    // Optional - Add full set of material icons
    implementation 'androidx.compose.material:material-icons-extended'
    // Optional - Add window size utils
    implementation 'androidx.compose.material3:material3-window-size-class'
    // Optional - Integration with LiveData
    implementation 'androidx.compose.runtime:runtime-livedata'
    // Optional - Integration with activities
    implementation "androidx.activity:activity-compose:${rootProject.ext.compose_activity_version}"
    // Optional - Integration with ViewModels
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:${rootProject.ext.compose_viewmodel_version}"

    // Accompanist Components
    implementation "com.google.accompanist:accompanist-systemuicontroller:${rootProject.ext.accompanist_version}"

    // Firebase BOM
    implementation platform('com.google.firebase:firebase-bom:32.0.0')
    // Add the dependencies for the Crashlytics and Analytics libraries
    implementation 'com.google.firebase:firebase-crashlytics-ktx'
    implementation 'com.google.firebase:firebase-analytics-ktx'
    // Add the dependency for the Performance Monitoring library
    implementation 'com.google.firebase:firebase-perf-ktx'

    // Navigation
    implementation "androidx.navigation:navigation-compose:${rootProject.ext.navigation_version}"
    implementation "androidx.hilt:hilt-navigation-compose:${rootProject.ext.navigation_hilt_version}"

    // Lifecycle
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:${rootProject.ext.lifecycle_ktx_version}"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:${rootProject.ext.lifecycle_ktx_version}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${rootProject.ext.lifecycle_ktx_version}"
    implementation "androidx.lifecycle:lifecycle-extensions:${rootProject.ext.lifecycle_ext_version}"
    implementation "androidx.lifecycle:lifecycle-runtime-compose:${rootProject.ext.lifecycle_compose_version}"

    // Datastore
    implementation "androidx.datastore:datastore:${rootProject.ext.datastore_version}"
    implementation "androidx.datastore:datastore-preferences:${rootProject.ext.datastore_version}"

    // Room
    implementation "androidx.room:room-runtime:${rootProject.ext.room_version}"
    implementation "androidx.room:room-ktx:${rootProject.ext.room_version}"
    annotationProcessor "androidx.room:room-compiler:${rootProject.ext.room_version}"
    androidTestImplementation "androidx.room:room-testing:${rootProject.ext.room_version}"
    ksp "androidx.room:room-compiler:${rootProject.ext.room_version}"

    // Hilt
    implementation "com.google.dagger:hilt-android:${rootProject.ext.dagger_hilt_version}"
    kapt "com.google.dagger:hilt-compiler:${rootProject.ext.dagger_hilt_version}"

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${rootProject.ext.kotlinx_coroutines_version}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${rootProject.ext.kotlinx_coroutines_version}"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:${rootProject.ext.kotlinx_coroutines_version}"

    // WorkManager
    implementation "androidx.work:work-runtime:${rootProject.ext.work_version}"
    // Kotlin + coroutines
    implementation "androidx.work:work-runtime-ktx:${rootProject.ext.work_version}"
    // optional - GCMNetworkManager support
    implementation "androidx.work:work-gcm:${rootProject.ext.work_version}"
    // optional - Test helpers
    androidTestImplementation "androidx.work:work-testing:${rootProject.ext.work_version}"
    // optional - Multiprocess support
    implementation "androidx.work:work-multiprocess:${rootProject.ext.work_version}"
    // optional - Integration with WorkManager
    implementation "androidx.hilt:hilt-work:${rootProject.ext.work_hilt_version}"
    kapt "androidx.hilt:hilt-compiler:${rootProject.ext.work_hilt_version}"

    // Paging
    implementation "androidx.paging:paging-runtime:${rootProject.ext.paging_version}"
    // alternatively - without Android dependencies for tests
    testImplementation "androidx.paging:paging-common:${rootProject.ext.paging_version}"
    // optional - Jetpack Compose integration
    implementation "androidx.paging:paging-compose:${rootProject.ext.paging_compose_version}"

    // Location Services
    implementation "com.google.android.gms:play-services-location:${rootProject.ext.gms_location_version}"

    /* ======================== Third-party Extension ======================== */

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:${rootProject.ext.retrofit_version}"
    implementation "com.squareup.retrofit2:converter-gson:${rootProject.ext.retrofit_gson_conveter_version}"
    implementation "com.squareup.retrofit2:converter-moshi:${rootProject.ext.retrofit_moshi_conveter_version}"

    // Moshi
    implementation "com.squareup.moshi:moshi:${rootProject.ext.moshi_version}"

    // Coil
    implementation "io.coil-kt:coil-compose:${rootProject.ext.coil_version}"
}